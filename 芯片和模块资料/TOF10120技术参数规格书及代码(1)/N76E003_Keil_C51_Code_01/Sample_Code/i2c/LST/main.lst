C51 COMPILER V9.53.0.0   MAIN                                                              04/14/2019 21:08:59 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_c51\C51\BIN\C51.EXE Source\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Include) DEFINE(FOS
                    -C_160000) DEBUG OBJECTEXTEND PRINT(.\LST\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2016 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/21/2016
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E003 I2C demo code, Slave Address of sensor = 0xA4=164
  16          //
  17          //   ____________           ______________ 
  18          //  |            |   SDA    |             |
  19          //  |            |<-------->|             |
  20          //  |            |          |             |
  21          //  | N76E003(M) |          |   sensor    |
  22          //  |            |   SCL    |             |
  23          //  |            |--------->|             |
  24          //  |____________|          |_____________|
  25          //
  26          //********************************************************************************************************
             -***
  27          
  28          #include <stdio.h>
  29          #include "N76E003.h"
  30          #include "Common.h"
  31          #include "Delay.h"
  32          #include "SFR_Macro.h"
  33          #include "Function_Define.h"
  34          
  35          
  36          #define SYS_CLK_EN              0
  37          #define SYS_SEL                 2
  38          #define SYS_DIV_EN              0                   //0: Fsys=Fosc=16mHz, 1: Fsys = Fosc/(2*CKDIV)=8mHz
  39          #define SYS_DIV                 1
  40          #define I2C_CLOCK               39                  //Fi2c = Fsys/(4*(I2C_CLOCK+1))=16mHz/(4*(I2C_CLOCK+1))=100kHz
  41          
  42          #define SENSOR_SLA              0xA4
  43          #define SENSOR_WR               0
  44          #define SENSOR_RD               1
  45          
C51 COMPILER V9.53.0.0   MAIN                                                              04/14/2019 21:08:59 PAGE 2   

  46          #define ERROR_CODE              0x01
  47          
  48          unsigned char rxbuf[16],rxempty, rxcnt,rxflag,errid;
  49          unsigned short int length_val;
  50          //========================================================================================================
  51          void Init_I2C(void)
  52          {
  53   1          /* Set I2C clock rate */
  54   1          I2CLK = I2C_CLOCK; 
  55   1      
  56   1          /* Enable I2C */
  57   1          set_I2CEN;                                   
  58   1      }
  59          //========================================================================================================
  60          void ReadLenth(unsigned char addr)
  61          {
  62   1        /* Step1 */
  63   1        set_STA;                                /* Send Start bit to I2C SENSOR */
  64   1        clr_SI;
  65   1        while (!SI);
  66   1        if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
  67   1        {
  68   2          errid = ERROR_CODE;
  69   2        }
  70   1      
  71   1        /* Step2 */
  72   1        I2DAT = (SENSOR_SLA | SENSOR_WR);       /* Send (SLA+W) to SENSOR */
  73   1        clr_STA;                                /* Clear STA and Keep SI value in I2CON */    
  74   1        clr_SI;
  75   1        while (!SI);
  76   1        if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */    
             -          
  77   1        {
  78   2          errid = ERROR_CODE;
  79   2        }
  80   1      
  81   1        /* Step3 */
  82   1        I2DAT = addr;                           /* Send I2C SENSOR's Address */
  83   1        clr_SI;
  84   1        while (!SI);
  85   1        if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has been r
             -eceived */              
  86   1        {
  87   2          errid = ERROR_CODE;
  88   2        }
  89   1      //    Delay10us(3);                       //根据需要加30uS延时
  90   1        /* Step4 */
  91   1        set_STA;                                /* Repeated START */
  92   1        clr_SI; 
  93   1        while (!SI);
  94   1        if (I2STAT != 0x10)                     /* 0x10: A repeated START condition has been transmitted */
  95   1        {
  96   2          errid = ERROR_CODE;
  97   2        }
  98   1      
  99   1        /* Step5 */
 100   1        clr_STA;                                /* Clear STA and Keep SI value in I2CON */
 101   1        I2DAT = (SENSOR_SLA | SENSOR_RD);       /* Send (SLA+R) to SENSOR */
 102   1        clr_SI;
 103   1        while (!SI);
 104   1        if (I2STAT != 0x40)                     /* 0x40:  SLA+R has been transmitted; ACK has been received */   
             -           
C51 COMPILER V9.53.0.0   MAIN                                                              04/14/2019 21:08:59 PAGE 3   

 105   1        {
 106   2          errid = ERROR_CODE;
 107   2        }
 108   1      
 109   1        /* Step6 */                             /* Read I2C SENSOR data */
 110   1        set_AA;                                 /* Set Assert Acknowledge Control Bit */
 111   1        clr_SI;
 112   1        while (!SI);
 113   1        if (I2STAT != 0x50)                     /* 0x50:Data byte has been received; NOT ACK has been returned */  
             -            
 114   1        {
 115   2          errid = ERROR_CODE;
 116   2        }
 117   1        length_val=I2DAT;
 118   1        length_val<<=8; 
 119   1        
 120   1        set_AA;                                 /* Set Assert Acknowledge Control Bit */
 121   1        clr_SI;
 122   1        while (!SI);
 123   1        if (I2STAT != 0x50)                     /* 0x50:Data byte has been received; NOT ACK has been returned */  
             -            
 124   1        {
 125   2          errid = ERROR_CODE;
 126   2        }
 127   1        length_val+=I2DAT;
 128   1      
 129   1        /* Step7 */
 130   1        clr_AA;                                 /* Send a NACK to disconnect SENSOR */
 131   1        clr_SI;
 132   1        while (!SI);
 133   1        if (I2STAT != 0x58)                     /* 0x58:Data byte has been received; ACK has been returned */
 134   1        {
 135   2          errid = ERROR_CODE;
 136   2        }
 137   1        
 138   1        /* Step8 */    
 139   1        clr_SI;
 140   1        set_STO;
 141   1        while (STO);                            /* Check STOP signal */ 
 142   1      }
 143          //========================================================================================================
 144          void WritePara(unsigned char addr,unsigned char dat)
 145          {
 146   1        /* Step1 */
 147   1        set_STA;                                /* Send Start bit to I2C SENSOR */         
 148   1        clr_SI;
 149   1        while (!SI);
 150   1        if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
 151   1        {
 152   2          errid = ERROR_CODE;
 153   2        }
 154   1      
 155   1        /* Step2 */
 156   1        clr_STA;                                /* Clear STA and Keep SI value in I2CON */
 157   1        I2DAT = SENSOR_SLA | SENSOR_WR;         /* Send (SLA+W) to SENSOR */
 158   1        clr_SI;
 159   1        while (!SI);
 160   1        if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */    
             -         
 161   1        {
 162   2          errid = ERROR_CODE;
 163   2        }
C51 COMPILER V9.53.0.0   MAIN                                                              04/14/2019 21:08:59 PAGE 4   

 164   1      
 165   1        /* Step3 */
 166   1        I2DAT = addr;                           /* Send SENSOR's Address */
 167   1        clr_SI;
 168   1        while (!SI);
 169   1        if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has been r
             -eceived */
 170   1        {
 171   2          errid = ERROR_CODE;
 172   2        }
 173   1      
 174   1        /* Step4 */                             /* Write data to I2C SENSOR */
 175   1        I2DAT = dat;                            /* Send data to SENSOR */
 176   1        clr_SI;
 177   1        while (!SI);
 178   1        if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has been rec
             -eived */
 179   1        {
 180   2          errid = ERROR_CODE;
 181   2        }     
 182   1                                                //After STOP condition, a inner SENSOR timed-write-cycle 
 183   1                                                //will occure and SENSOR will not response to outside command
 184   1                                                /* 0x18: SLA+W has been transmitted; ACK has been received */
 185   1        /* Step6 */
 186   1        do
 187   1        {
 188   2          set_STO;                              /* Set I2C STOP Control Bit */
 189   2          clr_SI;
 190   2          while (STO);                          /* Check STOP signal */
 191   2          
 192   2          set_STA;                              /* Check if no ACK is returned by SENSOR, it is under timed-write c
             -ycle */
 193   2          clr_SI;
 194   2          while (!SI);
 195   2          if (I2STAT != 0x08)                   /* 0x08:  A START condition has been transmitted*/
 196   2          {
 197   3            errid = ERROR_CODE;
 198   3          }
 199   2      
 200   2          clr_STA;                              /* Clear STA and Keep SI value in I2CON */
 201   2          I2DAT = (SENSOR_SLA | SENSOR_WR);     /* Send (SLA+W) to SENSOR */
 202   2          clr_SI;
 203   2          while (!SI);
 204   2        }while(I2STAT != 0x18);
 205   1      
 206   1        /* Step7 */
 207   1        set_STO;                                /* Set STOP Bit to I2C SENSOR */
 208   1        clr_SI;
 209   1        while (STO);                            /* Check STOP signal */
 210   1      }
 211          //========================================================================================================
 212          void main(void)
 213          {
 214   1          Set_All_GPIO_Quasi_Mode;
 215   1          InitialUART0_Timer3(115200);
 216   1        
 217   1          /* Initial I2C function */
 218   1          Init_I2C();   //100kHz                            
 219   1      
 220   1          WritePara(0x09,0x00);//设为被动读取模式
 221   1          Timer0_Delay1ms(1000); 
 222   1          while (1)
C51 COMPILER V9.53.0.0   MAIN                                                              04/14/2019 21:08:59 PAGE 5   

 223   1          {   
 224   2            ReadLenth(0x00); //读取实时距离
 225   2            if((length_val>0)&&(errid==0))
 226   2            {
 227   3              _nop_();
 228   3              length_val=0;
 229   3            }
 230   2            ReadLenth(0x04); //读取滤波距离
 231   2            if((length_val>0)&&(errid==0))
 232   2            {
 233   3              _nop_();
 234   3              length_val=0;
 235   3            }
 236   2            Timer0_Delay1ms(100);
 237   2          }
 238   1      /* =================== */
 239   1      }
 240          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    391    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
